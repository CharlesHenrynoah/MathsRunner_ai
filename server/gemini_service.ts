import axios, { AxiosError } from 'axios';
import * as fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

// D√©tecter le type de question
function detectQuestionType(question: string): string {
  const questionLower = question.toLowerCase();
  
  if (questionLower.includes('score') || 
      questionLower.includes('points') || 
      questionLower.includes('r√©sultat') ||
      questionLower.includes('performance')) {
    return 'performance';
  }
  
  if (questionLower.includes('r√®gle') || 
      questionLower.includes('comment') || 
      questionLower.includes('explique')) {
    return 'rules';
  }
  
  if (questionLower.includes('exercice') || 
      questionLower.includes('probl√®me') || 
      questionLower.includes('calcul')) {
    return 'math';
  }
  
  return 'general';
}

// Charger les chunks depuis les fichiers
async function loadChunks(): Promise<Record<string, string>> {
  const chunksDir = path.join(process.cwd(), 'Model', 'chunks');
  const chunks: Record<string, string> = {};

  try {
    const files = await fs.readdir(chunksDir);
    for (const file of files) {
      if (file.endsWith('.txt')) {
        const content = await fs.readFile(path.join(chunksDir, file), 'utf-8');
        chunks[file] = content;
      }
    }
  } catch (error) {
    console.error('[Gemini] Error loading chunks:', error);
  }

  return chunks;
}

// Construire le prompt en fonction du type de question
async function buildPrompt(question: string, questionType: string, userStats: any): Promise<string> {
  const chunks = await loadChunks();
  let contextChunks = '';
  
  // S√©lectionner les chunks pertinents
  Object.entries(chunks).forEach(([filename, content]) => {
    if (filename.startsWith(questionType)) {
      contextChunks += content + '\n';
    }
  });

  // Construire le contexte des statistiques
  let statsContext = '';
  if (userStats) {
    const ps = userStats.personalStats;
    const pt = userStats.progressionTemps;
    statsContext = `
Statistiques de l'√©l√®ve ${userStats.user.username} :
- Nombre total de parties : ${ps.totalGames}
- Score moyen : ${ps.averageScore}
- Meilleur score : ${ps.bestScore}
- Questions totales : ${ps.totalQuestions}
- Questions correctes : ${ps.totalCorrect}
- Pr√©cision moyenne : ${ps.averageAccuracy}%
- Temps de r√©ponse moyen : ${ps.averageResponseTime} secondes

Progression du temps de r√©ponse :
- Temps moyen initial (3 premi√®res parties) : ${pt.moyenneInitiale.toFixed(2)} secondes
- Temps moyen r√©cent (3 derni√®res parties) : ${pt.moyenneRecente.toFixed(2)} secondes
- Meilleur temps : ${pt.meilleurTemps.toFixed(2)} secondes

Derni√®re partie :
- Score : ${userStats.lastGame.score}
- Questions correctes : ${userStats.lastGame.totalCorrectes}/${userStats.lastGame.totalQuestions}
- Temps de r√©ponse moyen : ${userStats.lastGame.tempsReponseeMoyen?.toFixed(2) || 'Non disponible'} secondes
`;
  }

  return `
Instructions pour l'assistant math√©matique :
1. Vous √™tes un assistant math√©matique expert et p√©dagogue
2. Adaptez votre r√©ponse au niveau de l'√©l√®ve
3. Donnez des explications claires et concises
4. Utilisez des emojis pour rendre vos r√©ponses plus engageantes
5. Structurez vos r√©ponses avec des paragraphes clairs
6. IMPORTANT : R√©pondez TOUJOURS en fran√ßais

Voici comment structurer vos r√©ponses :
- Commencez par une salutation personnalis√©e avec un emoji üëã
- Divisez votre r√©ponse en sections claires avec des emojis appropri√©s :
  * üìä Statistiques globales
  * üí™ Points forts
  * üìà Progression
  * üéØ Points √† am√©liorer
  * üí° Conseils
- Terminez par un message d'encouragement avec un emoji positif üåü

${statsContext}

Question de l'√©l√®ve : ${question}

R√©ponse en tant qu'assistant math√©matique en fran√ßais :`;
}

export async function askGemini(question: string, userStats?: any): Promise<string> {
  if (!GEMINI_API_KEY) {
    console.error('[Gemini] API key not found');
    return 'Configuration de l\'assistant incompl√®te. Veuillez contacter l\'administrateur.';
  }

  try {
    const prompt = await buildPrompt(question, detectQuestionType(question), userStats);

    const response = await axios.post(
      `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
      {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.8,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
        safetySettings: [
          { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
          { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
          { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
          { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" }
        ]
      },
      {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 30000
      }
    );

    if (!response.data.candidates?.[0]?.content?.parts?.[0]?.text) {
      console.error('[Gemini] Unexpected response format:', JSON.stringify(response.data, null, 2));
      return 'D√©sol√©, je n\'ai pas pu g√©n√©rer une r√©ponse appropri√©e. Veuillez r√©essayer.';
    }

    return response.data.candidates[0].content.parts[0].text;
  } catch (error) {
    const axiosError = error as AxiosError;
    console.error('[Gemini] Error:', axiosError.response?.data || axiosError.message);
    
    if (axiosError.code === 'ECONNABORTED') {
      return '‚ö†Ô∏è La r√©ponse prend trop de temps. Veuillez r√©essayer avec une question plus simple.';
    }
    
    if (axiosError.response?.status === 400) {
      return '‚ùì Votre question est trop complexe. Veuillez la reformuler plus simplement.';
    }
    
    return 'üîß Erreur de communication avec l\'assistant. Veuillez r√©essayer dans quelques instants.';
  }
}
